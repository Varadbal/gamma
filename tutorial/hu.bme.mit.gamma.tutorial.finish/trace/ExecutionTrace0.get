import "tutorialView"
/**
 * Note, that this is no longer a valid trace due to the fix in Controller.sct.
*/
trace CrossroadTrace of Crossroad
step {
	assert {
		raise priorityOutput.displayRed
		raise secondaryOutput.displayRed
		states {
			secondary.Red,
			controller.Init,
			prior.Red,
			controller.Operating,
			secondary.Normal,
			prior.Normal
		}
	}
}
step {
	act {
		raise police.police
		schedule component
	}
	assert {
		raise priorityOutput.displayGreen
		states {
			secondary.Red,
			controller.Init,
			prior.Green,
			controller.Operating,
			secondary.Normal,
			prior.Normal
		}
	}
}
step {
	act {
		elapse 2000
		schedule component
	}
	assert {
		raise priorityOutput.displayYellow
		raise secondaryOutput.displayYellow
		states {
			secondary.Interrupted,
			controller.PriorityPrepares,
			controller.Operating,
			secondary.BlinkingYellow,
			prior.Interrupted,
			prior.BlinkingYellow
		}
	}
}
step {
	act {
		elapse 1000
		schedule component
	}
	assert {
		raise priorityOutput.displayNone
		raise secondaryOutput.displayNone
		states {
			secondary.Interrupted,
			secondary.Black,
			controller.Operating,
			prior.Interrupted,
			controller.Secondary,
			prior.Black
		}
	}
}
step {
	act {
		raise police.police
		schedule component
	}
	assert {
		states {
			secondary.Interrupted,
			secondary.Black,
			controller.Operating,
			prior.Interrupted,
			controller.Secondary,
			prior.Black
		}
	}
}
step {
	act {
		elapse 2000
		schedule component
	}
	assert {
		raise priorityOutput.displayGreen
		raise secondaryOutput.displayRed
		states {
			controller.SecondaryPrepares,
			secondary.Red,
			prior.Green,
			controller.Operating,
			secondary.Normal,
			prior.Normal
		}
	}
}
step {
	act {
		schedule component
	}
	assert {
		raise secondaryOutput.displayGreen
		states {
			controller.SecondaryPrepares,
			prior.Green,
			controller.Operating,
			secondary.Normal,
			prior.Normal,
			secondary.Green
		}
	}
}