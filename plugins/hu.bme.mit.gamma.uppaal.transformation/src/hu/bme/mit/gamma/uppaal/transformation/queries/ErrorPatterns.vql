/********************************************************************************
 * Copyright (c) 2018 Contributors to the Gamma project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * SPDX-License-Identifier: EPL-1.0
 ********************************************************************************/
package hu.bme.mit.gamma.uppaal.transformation.queries

import "http://www.mit.bme.hu/gamma/constraint/Model"
import "http://www.mit.bme.hu/gamma/statechart/Model"
import "http://www.mit.bme.hu/gamma/statechart/Model/Interface"

private pattern sourceAndTargetOfTransitions(transition : Transition, source : StateNode, target : StateNode) {
	Transition.sourceState(transition, source);
	Transition.targetState(transition, target);
}

pattern inOutTransitions(transition : Transition, source : StateNode, target : StateNode) {
	find sourceAndTargetOfTransitions(transition, source, target);	
	neg find sameRegionTransitions(source, target, transition, _);
	neg find toHigherTransitions(source, target, transition, _);
	neg find toLowerTransitions(source, target, transition, _);
}

pattern fromChoiceToHigherTransition(transition : Transition, choice : ChoiceState, target : StateNode) {
	ChoiceState(choice);
	find toHigherTransitions(choice, target, transition, _);
}

private pattern eventParameter(transition : Transition, event : Event, valueOfParameter : ParameterDeclaration) {
	Transition.trigger(transition, trigger);
	EventTrigger.eventReference(trigger, portEventReference);
	EventTrigger.parameters(trigger, reference);
	PortEventReference.event(portEventReference, event);
	ReferenceExpression.declaration(reference, valueOfParameter);
	Event.parameterDeclarations(event, valueOfParameter);
}

pattern prohibitedEventParameterReferences(source : StateNode, target : StateNode, valueOfParameter : ParameterDeclaration) {	
	Transition.sourceState(transition, source);
	Transition.targetState(transition, target);
	Transition.effects(transition, assignment);
	AssignmentAction.rhs(assignment, reference);
	ReferenceExpression.declaration(reference, valueOfParameter);
	Event.parameterDeclarations(_, valueOfParameter); // It must be an event parameter
	neg find eventParameter(transition, _, valueOfParameter);	
}