/********************************************************************************
 * Copyright (c) 2018 Contributors to the Gamma project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * SPDX-License-Identifier: EPL-1.0
 ********************************************************************************/
grammar hu.bme.mit.gamma.yakindu.genmodel.language.GenModel with hu.bme.mit.gamma.constraint.language.ConstraintLanguage

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.mit.bme.hu/gamma/statechart/Model" as model
import "platform:/resource/hu.bme.mit.gamma.statechart.model/model/statechart.ecore#//interface" as interface
import "http://www.mit.bme.hu/gamma/yakindu/Genmodel/"

import "http://www.yakindu.org/sct/sgraph/2.0.0" as sgraph
import "http://www.yakindu.org/sct/statechart/SText" as stext
import "http://www.yakindu.org/base/types/2.0.0" as types

GenModel returns GenModel:
	('import' 
		(packageImports+=[model::Package | STRING] |
		'external' statechartImports+=[sgraph::Statechart| STRING])
	)*
	(tasks += Task)*
;

Task returns Task:
	YakinduCompilation | CodeGeneration | AnalysisModelTransformation
;

YakinduCompilation returns YakinduCompilation:
	StatechartCompilation | InterfaceCompilation
;

InterfaceCompilation returns InterfaceCompilation:
	'interface' statechart=[sgraph::Statechart] '{'
		(
			'folder' '=' targetFolder=STRING | // The location of the folder relative to the project
			'file' '=' fileName=STRING | // The name of the generated file
			'package' '=' packageName=STRING // Gamma package name
		)*
	'}'
;

StatechartCompilation returns StatechartCompilation:
	'statechart' statechart=[sgraph::Statechart] '{'
		(
			'folder' '=' targetFolder=STRING | // The location of the folder relative to the project
			'file' '=' fileName=STRING | // The name of the generated file
			'package' '=' packageName=STRING | // Gamma package name
			'statechart' '=' statechartName=STRING // Gamma statechart name
		)*
		'mappings' '{'
			(interfaceMappings+=InterfaceMapping)*
		'}'
	'}'
;

CodeGeneration returns CodeGeneration:
	'code' component=[model::Component] '{'
		(
			'folder' '=' targetFolder=STRING |
			'package' '=' packageName=STRING |
			'language' '=' language=ProgrammingLanguage
		)*
	'}'
;

enum ProgrammingLanguage returns ProgrammingLanguage:
	JAVA = 'java'
;

AnalysisModelTransformation:
	'analysis' component=[model::Component] ('(' parameters+=Expression (',' parameters+=Expression)* ')')? '{'
		(
			'folder' '=' targetFolder=STRING |			
			'file' '=' fileName=STRING |
			'language' '=' language=AnalysisLanguage 
		)*
	'}'
;

enum AnalysisLanguage returns AnalysisLanguage:
	UPPAAL = "UPPAAL"
;

InterfaceMapping  returns InterfaceMapping:
	'map' yakinduInterface=[stext::InterfaceScope] '=' gammaInterface=[interface::Interface] 'as' realizationMode=RealizationMode ('{'
		eventMappings+=EventMapping*
	'}')?
;

EventMapping returns EventMapping:
	'map' yakinduEvent=[types::Event] '=' gammaEvent=[interface::Event] 
;

enum RealizationMode returns model::RealizationMode:
	PROVIDED = 'provided' | REQUIRED = 'required'
;
